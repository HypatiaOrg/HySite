services:
    mongo-db:
        container_name: mongoDB
        image: mongo
        restart: "${RESTART_POLICY:-no}"
        healthcheck:
            test: ["CMD", "echo", "'db.runCommand(\"ping\").ok'", "|", "mongosh", "localhost:27017/test", "--quiet"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 40s
        environment:
            # These *INITDB* variables only used when the database is first initialized
            MONGO_INITDB_ROOT_USERNAME: "${MONGO_USERNAME}"
            MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
        volumes:
            - type: bind
              source: ./mongo
              target: /data/db
        # open a port on the localhost computer for using the API outside a docker container
        ports: ["27017:27017"]
        profiles: ["db"]
        networks:
            - hynet

    web-to-py:
        image: ghcr.io/hypatiaorg/hyapp:LATEST
        build:
            context: ./web2py
        pull_policy: always
        restart: "${RESTART_POLICY:-no}"
        environment:
            BASE_API_URL: "http://django-api:8111"
        volumes:
            # The web2 py app needs to read and write files, it uses the file system as a database
            # we must write file locally for them to persist between builds.
            - ./web2py:/home/web2py/web2py:rw
        # the first command to run when the container starts, start the gunicorn server
        command: ["python", "anyserver.py", "-s", "gunicorn", "-i", "0.0.0.0", "-p", "8222"]
        # ports: ["8222:8222"]
        profiles: ["dual"]
        networks:
            - hynet

    django-api:
        build: ./backend
        restart: "${RESTART_POLICY:-no}"
        # ports: ["8111:8111"]
        environment:
            DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
            MONGO_USERNAME: "${MONGO_USERNAME}"
            MONGO_PASSWORD: "${MONGO_PASSWORD}"
            MONGO_HOST: "${MONGO_HOST:-mongoDB}"

        volumes:
            # django-static is written at build time by the SpExWebsite Dockerfile
            - "django-static:/app/static_root:rw"
        command: ["gunicorn", "core.wsgi", "--bind", "0.0.0.0:8111"]
        profiles: ["dual", "api"]
        networks:
            - hynet

    ipython:
        container_name: ipython
        build:
            context: ./backend
            dockerfile: ipython.Dockerfile
        restart: "${RESTART_POLICY:-no}"
        user: root
        ports:
            - "8888:8888"
        environment:
            JUPYTER_TOKEN: "${JUPYTER_TOKEN:-docker}"
            GRANT_SUDO: "yes"
            DOCKER_STACKS_JUPYTER_CMD: "notebook"
            DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
            MONGO_USERNAME: "${MONGO_USERNAME}"
            MONGO_PASSWORD: "${MONGO_PASSWORD}"
            MONGO_HOST: "${MONGO_HOST:-mongoDB}"
        volumes:
            - ./backend:/backend
        profiles: ["ipython"]
        networks:
            - hynet

    nginx-hysite:
        container_name: nginx-hysite
        image: nginx:latest
        restart: "${RESTART_POLICY:-no}"
        ports:
            - "${LOCAL_PORT:-80}:80"
        volumes:
            - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
            - "django-static:/django/static_root:ro"
        profiles: ["dual", "api"]
        networks:
            - hynet

volumes:
    django-static:

networks:
    hynet:
        name: hynet
        external: "${USE_EXTERNAL_NETWORK:-false}"