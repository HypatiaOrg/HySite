"""
Django settings for project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import shutil
from pathlib import Path
from warnings import warn

from hypatia.configs.file_paths import test_database_dir, output_website_dir


def str_is_true(s: str) -> bool:
    return s.lower().strip() in ["true", "yes", "1"]


def copy_static_files(source_dir: str = None, target_dir: str = None) -> None:
    """
    Copy static files from directory populated at container build time
    to a directory the has a docker volume mounted to it.
    """
    # delete all files in the target directory
    for item in os.listdir(target_dir):
        item_path = os.path.join(target_dir, item)
        if os.path.isfile(item_path):
            os.remove(item_path)
        elif os.path.isdir(item_path):
            shutil.rmtree(item_path)
    # copy files from source to target directory
    for item in os.listdir(source_dir):
        source_item = os.path.join(source_dir, item)
        target_item = os.path.join(target_dir, item)
        if os.path.isdir(source_item):
            shutil.copytree(source_item, target_item, dirs_exist_ok=True)
        else:
            shutil.copy2(source_item, target_item)
    print(f'Copied static files from {source_dir} to {target_dir}')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY",  'django-insecure-cd&fl(0@&4*%#ax_y$rvt)2z2qz@!hwh$3e17m1%u$#luzls-%')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str_is_true(os.environ.get("DEBUG", "true"))
if DEBUG:
    warn("DEBUG is set to True. Do not run with DEBUG=True in production.")


ALLOWED_HOSTS = [
    'hypatiacatalog.com',
    'www.hypatiacatalog.com',
    'new.hypatiacatalog.com',
    'django-api',
]
if DEBUG:
    ALLOWED_HOSTS.append("localhost")
    ALLOWED_HOSTS.append("127.0.0.1")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'hypatia',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'core.throttling.BurstRateThrottle',
        'core.throttling.SustainedRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'full_db': '3/day',
        'burst': '50/min',
        'sustained': '10000/day'
    },
}

# This database is not used. We use a MongoDB database for the Hypatia API
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(test_database_dir, 'usersdb.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = 'hypatia/api/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "core", "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static_root")

# move static files and plots if the specified target directory is found (like in a docker container)
app_static_dir = os.path.join('/', 'app', 'static')
app_plots_dir = os.path.join(app_static_dir, 'plots')
if os.path.isdir(app_static_dir):
    copy_static_files(source_dir=STATIC_ROOT, target_dir=app_static_dir)
    # create the plots directory if it does not exist
    if not os.path.exists(app_plots_dir):
        os.makedirs(app_plots_dir)
    # copy the static files to the plots directory
    copy_static_files(source_dir=output_website_dir, target_dir=app_plots_dir)


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# add a trailing slash to all urls routs
APPEND_SLASH = True
